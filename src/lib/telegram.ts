interface TelegramConfig {
  botToken: string
  channelId: string
}

interface TelegramPost {
  title: string
  content: string
  type: 'regular' | 'ad'
  scheduledDate?: Date
}

interface TelegramResponse {
  ok: boolean
  result?: any
  error_code?: number
  description?: string
}

class TelegramAPI {
  private config: TelegramConfig

  constructor(config: TelegramConfig) {
    this.config = config
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
  async sendMessage(post: TelegramPost): Promise<TelegramResponse> {
    try {
      const message = this.formatMessage(post)
      
      const response = await fetch(`https://api.telegram.org/bot${this.config.botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: this.config.channelId,
          text: message,
          parse_mode: 'HTML',
          disable_web_page_preview: false
        })
      })

      const data = await response.json()
      return data as TelegramResponse
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
      return {
        ok: false,
        error_code: 500,
        description: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
      }
    }
  }

  // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞
  async scheduleMessage(post: TelegramPost): Promise<boolean> {
    if (!post.scheduledDate) return false

    const delay = post.scheduledDate.getTime() - Date.now()
    
    if (delay <= 0) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ
      const result = await this.sendMessage(post)
      return result.ok
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
    const scheduledPosts = this.getScheduledPosts()
    scheduledPosts.push({
      ...post,
      id: Date.now().toString(),
      status: 'scheduled'
    })
    
    localStorage.setItem('scheduledPosts', JSON.stringify(scheduledPosts))
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã cron job –∏–ª–∏ queue —Å–∏—Å—Ç–µ–º–∞
    setTimeout(async () => {
      await this.sendMessage(post)
      this.removeScheduledPost(Date.now().toString())
    }, delay)

    return true
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ
  async getChannelInfo(): Promise<TelegramResponse> {
    try {
      const response = await fetch(`https://api.telegram.org/bot${this.config.botToken}/getChat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: this.config.channelId
        })
      })

      return await response.json()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ:', error)
      return {
        ok: false,
        error_code: 500,
        description: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ'
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async testConnection(): Promise<boolean> {
    try {
      const response = await fetch(`https://api.telegram.org/bot${this.config.botToken}/getMe`)
      const data = await response.json()
      return data.ok
    } catch (error) {
      return false
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  private formatMessage(post: TelegramPost): string {
    let message = `<b>${post.title}</b>\n\n`
    
    if (post.content) {
      message += `${post.content}\n\n`
    }

    if (post.type === 'ad') {
      message += '<i>üì¢ –†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç</i>'
    }

    return message
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
  private getScheduledPosts(): any[] {
    const posts = localStorage.getItem('scheduledPosts')
    return posts ? JSON.parse(posts) : []
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
  private removeScheduledPost(id: string): void {
    const posts = this.getScheduledPosts()
    const filtered = posts.filter(post => post.id !== id)
    localStorage.setItem('scheduledPosts', JSON.stringify(filtered))
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  async getChannelStats(): Promise<any> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã API –∑–∞–ø—Ä–æ—Å—ã –∫ Telegram
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    return {
      subscribers: Math.floor(Math.random() * 50000) + 40000,
      views: Math.floor(Math.random() * 1000000) + 800000,
      engagement: Math.random() * 10 + 5,
      reach: Math.floor(Math.random() * 300000) + 200000
    }
  }
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
export const telegramUtils = {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  isValidToken(token: string): boolean {
    const tokenRegex = /^\d{8,10}:[a-zA-Z0-9_-]{35}$/
    return tokenRegex.test(token)
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ID –∫–∞–Ω–∞–ª–∞
  isValidChannelId(channelId: string): boolean {
    return channelId.startsWith('-100') || channelId.startsWith('@')
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞ –∏–∑ ID
  getChannelName(channelId: string): string {
    if (channelId.startsWith('@')) {
      return channelId
    }
    return `ID: ${channelId}`
  }
}

export { TelegramAPI }
export type { TelegramConfig, TelegramPost, TelegramResponse }